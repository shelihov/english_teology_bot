
import logging
import random
import asyncio
import sqlite3
import json
from dotenv import load_dotenv
import os

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, Command


# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
API_TOKEN = os.getenv('API_TOKEN')

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

import glob
# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–ª–æ–≤–∞—Ä–µ–π
def load_dictionaries():
    dicts = {}
    for file in glob.glob("*.json"):
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä, —á—Ç–æ–±—ã –Ω–µ –±—Ä–∞—Ç—å —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
        name = file.split(".")[0]
        with open(file, "r", encoding="utf-8") as f:
            dicts[name] = json.load(f)
    return dicts

DICTIONARIES = load_dictionaries()
DEFAULT_DICT = list(DICTIONARIES.keys())[0] if DICTIONARIES else None

DB_FILE = "users.db"
conn = sqlite3.connect(DB_FILE)
c = conn.cursor()
# –ù–æ–≤–∞—è —Å—Ö–µ–º–∞: —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∫–ª—é—á (user_id, dict)
create_table_sql = '''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER,
    dict TEXT,
    seen TEXT,
    unseen TEXT,
    current INTEGER,
    PRIMARY KEY (user_id, dict)
)'''
c.execute(create_table_sql)
conn.commit()

# –£—Ç–∏–ª–∏—Ç—ã —Ä–∞–±–æ—Ç—ã —Å –ë–î
def get_user(user_id):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    c.execute("SELECT dict FROM users WHERE user_id = ? ORDER BY rowid DESC LIMIT 1", (user_id,))
    dict_row = c.fetchone()
    if not DICTIONARIES or DEFAULT_DICT is None:
        return [], [], -1, None
    dict_name = dict_row[0] if dict_row else DEFAULT_DICT
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–ª–æ–≤–∞—Ä—é
    c.execute("SELECT seen, unseen, current FROM users WHERE user_id = ? AND dict = ?", (user_id, dict_name))
    row = c.fetchone()
    if row:
        seen = json.loads(row[0])
        unseen = json.loads(row[1])
        current = row[2]
    else:
        dict_len = len(DICTIONARIES[dict_name])
        seen = []
        unseen = list(range(dict_len))
        current = -1
        c.execute("INSERT INTO users (user_id, dict, seen, unseen, current) VALUES (?, ?, ?, ?, ?)", (user_id, dict_name, json.dumps(seen), json.dumps(unseen), current))
        conn.commit()
    return seen, unseen, current, dict_name

def update_user(user_id, seen, unseen, current, dict_name=None):
    if dict_name is not None:
        c.execute("UPDATE users SET seen = ?, unseen = ?, current = ? WHERE user_id = ? AND dict = ?", (json.dumps(seen), json.dumps(unseen), current, user_id, dict_name))
    else:
        # dict_name –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        pass
    conn.commit()

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

def get_menu_keyboard(selected_dict=None):
    dict_buttons = [[KeyboardButton(text=f"–°–ª–æ–≤–∞—Ä—å: {name}")] for name in DICTIONARIES.keys()]
    menu = dict_buttons
    menu.append([KeyboardButton(text="–í—ã–¥–∞—Ç—å —Ç–µ–∫—Å—Ç")])
    menu.append([KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")])
    return ReplyKeyboardMarkup(keyboard=menu, resize_keyboard=True)

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    _, _, _, dict_name = get_user(message.from_user.id)
    if dict_name is None:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω .json-—Ñ–∞–π–ª —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ –ø–∞–ø–∫—É.")
        return
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ.\n–¢–µ–∫—É—â–∏–π —Å–ª–æ–≤–∞—Ä—å: <b>{dict_name}</b>",
        reply_markup=get_menu_keyboard(dict_name)
    )

@dp.message()
async def menu_and_translation_handler(message: types.Message):
    text = message.text.strip()
    user_id = message.from_user.id
    seen, unseen, current_idx, dict_name = get_user(user_id)
    if dict_name is None:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω .json-—Ñ–∞–π–ª —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ –ø–∞–ø–∫—É.")
        return
    # –í—ã–±–æ—Ä —Å–ª–æ–≤–∞—Ä—è
    if text.startswith("–°–ª–æ–≤–∞—Ä—å: "):
        new_dict = text.replace("–°–ª–æ–≤–∞—Ä—å: ", "")
        if new_dict in DICTIONARIES:
            c.execute("SELECT seen, unseen, current FROM users WHERE user_id = ? AND dict = ?", (user_id, new_dict))
            row = c.fetchone()
            if row:
                seen = json.loads(row[0])
                unseen = json.loads(row[1])
                current_idx = row[2]
            else:
                dict_len = len(DICTIONARIES[new_dict])
                seen = []
                unseen = list(range(dict_len))
                current_idx = -1
                c.execute("INSERT INTO users (user_id, dict, seen, unseen, current) VALUES (?, ?, ?, ?, ?)", (user_id, new_dict, json.dumps(seen), json.dumps(unseen), current_idx))
                conn.commit()
            update_user(user_id, seen, unseen, current_idx, new_dict)
            await message.answer(f"‚úÖ –°–ª–æ–≤–∞—Ä—å <b>{new_dict}</b> –≤—ã–±—Ä–∞–Ω!", reply_markup=get_menu_keyboard(new_dict))
        else:
            await message.answer("‚ùå –¢–∞–∫–æ–π —Å–ª–æ–≤–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_menu_keyboard(dict_name))
        return
    # –ö–Ω–æ–ø–∫–∞ "–í—ã–¥–∞—Ç—å —Ç–µ–∫—Å—Ç"
    if text == "–í—ã–¥–∞—Ç—å —Ç–µ–∫—Å—Ç":
        if not unseen:
            await message.answer("üéâ –í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã!", reply_markup=get_menu_keyboard(dict_name))
            return
        if dict_name not in DICTIONARIES:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        idx = random.choice(unseen)
        en_text = DICTIONARIES[dict_name][idx]["en"]
        update_user(user_id, seen, unseen, idx, dict_name)
        await message.answer(f"<b>–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n\n{en_text}\n\n<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥ –≤ —á–∞—Ç</i>", reply_markup=get_menu_keyboard(dict_name))
        return
    # –ö–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Å–ª–æ–≤–∞—Ä—è–º
        stats = []
        for dict_key in DICTIONARIES.keys():
            c.execute("SELECT seen, unseen FROM users WHERE user_id = ? AND dict = ?", (user_id, dict_key))
            row = c.fetchone()
            if row:
                seen = json.loads(row[0])
                unseen = json.loads(row[1])
            else:
                seen = []
                unseen = list(range(len(DICTIONARIES[dict_key])))
            total = len(DICTIONARIES[dict_key])
            stats.append(f"<b>{dict_key}</b>:\n–ü—Ä–æ–π–¥–µ–Ω–æ: <b>{len(seen)}</b>\n–û—Å—Ç–∞–ª–æ—Å—å: <b>{len(unseen)}</b>\n–í—Å–µ–≥–æ: <b>{total}</b>")
        msg = "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Å–ª–æ–≤–∞—Ä—è–º:</b>\n\n" + "\n\n".join(stats)
        await message.answer(msg, reply_markup=get_menu_keyboard(dict_name))
        return
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é ‚Äî —Å—á–∏—Ç–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥–æ–º
    if current_idx == -1:
        return
    if dict_name not in DICTIONARIES:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    ru_text = DICTIONARIES[dict_name][current_idx]["ru"]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="mark_correct")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="mark_incorrect")]
    ])
    await message.answer(f"<b>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥:</b>\n\n{ru_text}")
    await message.answer("–í—ã —Å–º–æ–≥–ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç?", reply_markup=keyboard)

# –ö–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ä—Ç" –≤ –º–µ–Ω—é
## –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –∏ –∫–æ–º–∞–Ω–¥ /menu, /stats, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ ReplyKeyboard

## –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–í—ã–¥–∞—Ç—å —Ç–µ–∫—Å—Ç" ‚Äî —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ ReplyKeyboard

## –£–¥–∞–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ handle_translation ‚Äî —Ç–µ–ø–µ—Ä—å –≤—Å—ë –≤ –æ–¥–Ω–æ–º

@dp.callback_query(F.data.in_(["mark_correct", "mark_incorrect"]))
async def handle_result(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    seen, unseen, current_idx, dict_name = get_user(user_id)
    if dict_name is None or dict_name not in DICTIONARIES:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    await callback.message.edit_reply_markup(reply_markup=None)
    if callback.data == "mark_correct" and current_idx != -1:
        if current_idx not in seen:
            seen.append(current_idx)
        if current_idx in unseen:
            unseen.remove(current_idx)
        update_user(user_id, seen, unseen, -1, dict_name)
        await callback.answer("–¢–µ–∫—Å—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã—É—á–µ–Ω–Ω—ã–π.")
    elif callback.data == "mark_incorrect":
        update_user(user_id, seen, unseen, -1, dict_name)
        await callback.answer("–¢–µ–∫—Å—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
    # –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
    next_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç", callback_data="next_text")]
    ])
    await callback.message.answer("–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç?", reply_markup=next_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç'
@dp.callback_query(F.data == "next_text")
async def next_text_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    seen, unseen, _, dict_name = get_user(user_id)
    if dict_name is None or dict_name not in DICTIONARIES:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    if not unseen:
        await callback.message.answer("üéâ –í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã!", reply_markup=get_menu_keyboard(dict_name))
        await callback.answer()
        return
    idx = random.choice(unseen)
    en_text = DICTIONARIES[dict_name][idx]["en"]
    update_user(user_id, seen, unseen, idx, dict_name)
    await callback.message.answer(f"<b>–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n\n{en_text}\n\n<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥ –≤ —á–∞—Ç</i>", reply_markup=get_menu_keyboard(dict_name))
    await callback.answer()

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
